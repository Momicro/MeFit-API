package com.experis.de.MeFit.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.v3.oas.annotations.media.Schema;
//import lombok.Data;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Entity
@Table(name = "MuscleGroup")
@Schema(description = "MuscleGroup Model")
public  @Getter
        @Setter
        @RequiredArgsConstructor
        class MuscleGroup {

    //autogenerated ID which never has to be defined in future functions.
    @ApiModelProperty(notes = "ID of the muscle group", name = "id", value = "1")
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    //Here the static components of the model
    @Column(name="name",
            nullable = false,
            columnDefinition = "TEXT")
    private String name;

    //related data
    //exercise - muscleGroup - relation
    @ApiModelProperty(notes = "List of exercise IDs in muscle group", name = "List of exercise IDs")
    @ManyToMany(cascade = {/*CascadeType.ALL, */CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH}, mappedBy = "muscleGroups")
    public Set<Exercise> exercises= new HashSet<>();

    //restricts the output to a List of exercise IDs
    @JsonGetter("exercise")
    public List<String> exercises() {
        return exercises.stream()
                .map(exercise -> {
                    return "/api/v1/exercises/" + exercise.getId();
                }).collect(Collectors.toList());
    }

    /*
    //restricts the output to the exercise ID
    @JsonGetter("exercise")
    public String exercise() {
        if(exercises != null){
            return "/api/v1/exercise/" + exercises.getId();
        }else{
            return null;
        }
    }
     */
}
